正则：
1.文本中不包含指定字符串的行
^((?!不想包含的字符串).)*$
过滤结果：是行
如：过滤出文本中不包含url和http的行：  ^((?!(url|http)).)*$

2.过滤出文本文件中所有的ip，并显示对应的行号
2.1：

grep -E -n  -o '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)'   test.txt
缺点：
没有ip的行不占行数；同一行中的两个ip分行显示
例如：
5:10.0.41.201
6:10.0.32.219
7:10.0.41.201
8:10.0.32.219
10:10.0.32.215
10:10.0.33.210

2.2：
sed -r 's%(http://)(([0-9]+\.){3}[0-9]+)(.*)%\2%' test.txt
sed -r 's%(http://)(([0-9]+\.){3}[0-9]+)%\2%' test.txt
第二行效果与第一行一样，都会讲第二个ip忽略掉。
缺点：
同一行中有两个ip时，只过滤出第一个ip。
例如：http://10.0.32.215/aipforcip/ws/serviceproxyAIP?wsdl


2.3：过滤出ip和端口号
sed -r 's%(http://)(([0-9]+\.){3}[0-9]+(:[0-9]{1,})?)(.*)%\2%g' test.txt
sed -r 's%(http://)(([0-9]+\.){3}[0-9]+(:[0-9]{1,})?)%\2%g' test.txt
缺点：只过滤出第一ip和端口号
http://10.0.32.215/aipforcip/ws/serviceproxyAIP?wsdl

2.4：采用删除的方式（强删）
   比如：删除http://
   sed -r 's/http:\/\///g'  test.txt
把字母和不需要的字符都删掉
   sed -r 's/\/([a-zA-Z|\?|_]+)//g'  test.txt | sed -r  's/http:\/\///g'
缺点：想保留的字符会被误删除，比如：多删除了/
   http://cxf.webservice.cipaip.abchinalife.cn/
   http:/.webservice.cipaip.abchinalife.cn/
思考：
是不是因为ip后面的内容没匹配上，所有没能替换

4.5：(对于http://ip/...的形式适用)过滤出一行中有两个ip的情况的ip，并且还在同一行，以逗号分隔开
sed -r 's/http:\/\/(([0-9]+\.){3}[0-9]+(:[0-9]{1,})?)\/{1}([a-zA-Z|\?|\/|_]+)/\1/g'  test.txt
例如：过滤出http://10.0.32.215/aipforcip/ws/serviceproxyAIP?wsdl,http://10.0.33.210/lis_web_ind/newContServlet的ip
结果：10.0.32.215,10.0.33.210

同理：
failover:(tcp://10.0.40.195:61616,tcp://10.0.40.195:61617,tcp://10.0.40.196:61616)?randomize
sed -r 's%(failover:\()?tcp://%%g'  test.txt  | sed -r  's%\)\?randomize%%g'

同理：
jdbc:oracle:thin:@10.0.36.147:1521/netdbtaf
sed -r 's%/(icprdadg|netdbtaf)%%g'  test.txt | sed -r 's%jdbc:oracle:thin:@%%g'

tips:
犯了一个错误,是这样的，将sed -ri 完了之后通过管道给下一个sed，然后就报错了。

















