清理redis缓存,若是集群,在主节点进行clean,从节点会报错,从节点是只读的.
清除redis只需要安装客户端即可,能使用redis-cli即可,无需启动redis-server

一.清理命令
第一种(常规):
>/redis/redis-cli -h ${i} -p 6379 eval "local keys = redis.call('keys', ARGV[1])  for i=1,#keys,5000 do  redis.call('del', unpack(keys, i, math.min(i+4999, #keys)))  end  return keys" 0  *123456*
第二种(优雅删除):
>/redis/redis/src/redis-cli -h ${redis_host} -p ${redis_port} --scan --pattern \"*${redis_key}*\" | xargs -L 2000 /redis/redis/src/redis-cli -h ${redis_host} -p ${redis_port} del "
第三种(全清)(异步删除缓存 ):
异步删除防止把redis清挂
>flushall async


二.遇到的问题
1.使用异步全清的背景(单线程并未实现理想结果)
Flush是一个极少用到的操作,不过既然碰到过诡异的现象,也记录在此.
问题场景是在Reids Cluster中使用主从模式,向主节点发送flush命令,预期主从节点都会清空数据库.但是诡异的现象出现了,我们得到的结果是主从节点发生了切换,并且数据并没有被清空.
问题分析
分析以上case,Redis采用单线程模型,flush操作执行的时候会阻塞所有其它操作,包括集群间心跳包.当Redis中有大量数据的时候,flush操作会消耗较长时间.所以该节点较长时间不能跟集群通信,当达到一定阈值的时候,集群会判定该节点为fail,并且会切换主从状态.
Redis采用异步的方式进行主从同步,flush操作在主节点执行完成之后,才会将命令同步到从节点.此时老的从节点变为了主节点,它不会再接受来自老的主节点的删除数据的操作.
当老的主节点flush完成的时候,它恢复与集群中其它节点的通讯,得知自己被变成了从节点,所又会把数据同步过来.最终造成了主从节点发生了切换,并且数据没有被清空的现象.
